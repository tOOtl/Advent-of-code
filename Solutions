# Advent of code

def DayOnePuzzleOne():
    instructions = """()(((()))(()()()((((()(((())(()(()((((((()(()(((())))((()(((()))((())(()((()()()()(((())(((((((())))()()(()(()(())(((((()()()((())(((((()()))))()(())(((())(())((((((())())))(()())))()))))()())()())((()()((()()()()(()((((((((()()())((()()(((((()(((())((())(()))()((((()((((((((())()((()())(())((()))())((((()())(((((((((((()()(((((()(()))())(((()(()))())((()(()())())())(()(((())(())())()()(()(()((()))((()))))((((()(((()))))((((()(()(()())())()(((()((((())((((()(((()()(())()()()())((()((((((()((()()))()((()))()(()()((())))(((()(((()))((()((()(()))(((()()(()(()()()))))()()(((()(((())())))))((()(((())()(()(())((()())))((((())))(()(()(()())()((()())))(((()((()(())()()((()((())(()()((())(())()))()))((()(())()))())(((((((()(()()(()(())())))))))(()((((((())((((())((())())(()()))))()(())(()())()())((())(()))))(()))(()((()))()(()((((((()()()()((((((((()(()(())((()()(()()))(())()())()((())))()))()())(((()))(())()(())()))()((()((()(()()())(())()()()((())())))((()()(()()((()(())()()())(((()(()()))))(())))(()(()())()))()()))))))()))))((((((())))())))(()(())())(()())))))(()))()))))))()((()))))()))))(()(()((()())())(()()))))(((())()))())())())(((()(()()))(())()(())(())((((((()()))))((()(()))))))(()))())(((()()(()))()())()()()())))))))))))))(())(()))(()))((()(())(()())(())())(()())(())()()(()())))()()()))(())())()))())())(())((())))))))(())))(())))))()))))((())(()(((()))))(()))()((()(())))(()())(((((()))()())()()))))()))))()))())(()(()()()))()))))))((()))))))))))()((()))((()(())((())()()(()()))()(()))))()()(()))()))(((())))(())()((())(())(()())()())())))))))())))()((())))()))(()))()()))(((((((()))())(()()))(()()(()))()(()((()())()))))))(((()()()())))(())()))()())(()()))()()))))))))(())))()))()()))))))()))()())))()(())(())))))()(())()()(()()))))())((()))))()))))(()(((((()))))))))())))())()(())()()))))(())))())()()())()()())()(()))))()))()))))))))())))((()))()))()))())))()())()()())))())))(()((())()((()))())))))())()(())((())))))))))))())()())(())())())(()))(()))()))())(()(())())()())()()(()))))(()(())))))))(())))())(())))))))())()()(())())())))(())))))()))()(()())()(()))())())))))()()(()))()))))())))))))))()))))()))))))())()())()()))))()())))())))))))))))()()))))()()(((()))()()(())()))))((()))))(()))(())())))(())()))))))(()))()))))(())())))))()))(()())))))))))))))())))))))))()((()())(()())))))))((()))))(())(())))()(()())())))())())(()()()())))()))))))())))))())()()())))))))))))()()(()))))()())()))((()())(()))))()(()))))))))))()())())(((())(()))))())()))()))()))))))()))))))(()))))()))))()(())))(())))(()))())()()(()()))()))(()()))))))))()))(()))())(()()(()(()())()()))()))))))))(())))))((()()(()))())())))))()))())(()())()()))())))()(()()()()))((())())))())()(()()))()))))))))(()))(())))()))))(()(()())(()))))()())())()))()()))())))))))))))())()))))))()))))))))())))))()))))())(()())))(())()))())())))))()()(()()())(()())))()()))(((()))(()()()))))()))))()))))((())))()((((((()()))))))())))))))))))(((()))))))))))))(())())))))())(()))))))(()))((()))())))()(()((()))()))()))))))))))())()))()(()()))))())))())(())()(()))()))())(()))()))))(()()))()()(())))))()))(())(()(()()))(()()())))))(((()))))))()))))))))))))(())(()))))()())())()()((()()))())))))(()))))())))))))()()()))))))))())))()(((()()))(())))))(((())())))))((()))()(()))(()))))(()())))(()))())))))()))))(())(())))()((()))(())())))()()))()))))))))()))(()()()(()()()(()))())(())()())(((()))(())))))))))(((()())))()()))))))))()(())(()))()((((())(())(()())))()))(((())()()()))((()))(()))())())))())))(()))())()())())(()(())())()()()(())))())(())))(())))(())()))()))(()((()))))))))())(()))))))())(()()))()()))()(()(()())))()()(()((()((((((()))(())))()()()))())()))((()()(()))())((()(()(()))(()()))))()())))()))()())))))))()()((()())(())))()))(()))(())(()))())(()(())))()()))))))(((()(((()()))()(()(())())((()()))()))()))()))()(()()()(()))((()())()(())))()()))(((())()()())(())()((()()()()(()(())(()()))()(((((()())))((())))))(()()()))))(((()(())))()))((()((()(())()(()((())))((()())()(()))(((()())()()(()))(())(((()((()())()((())()())(((()()))((()((())(()))(()())(()()()))((()))(())(()((()()())((()))(())))(())(())(())))(()())))(((((()(()(((((()())((((()(()())(())(()()(((())((()(((()()(((()()((((((())))())(()((((((()(()))()))()()((()((()))))()(()()(()((()()))))))(((((()(((((())()()()(())())))))))()))((()()(())))(())(()()()())))))(()((((())))))))()()(((()(()(()(()(()())()()()(((((((((()()())()(()))((()()()()()(((((((()())()((())()))((((((()(()(()(()())(((()(((((((()(((())(((((((((())(())())()))((()(()))(((()()())(())(()(()()(((()(())()))())))(())((((((())(()()())()()(((()(((())(()(((())(((((((()(((((((((()))(())(()(()(()))))((()))()(())())())((()(()((()()))((()()((()(())(())(()((())(((())(((()()()((((((()()(())((((())()))))(())((()(()((())))(((((()(()()())())((())())))((())((()((()()((((((())(((()()(()())())(()(()))(()(()))())())()(((((((()(((()(())()()((())((()(()()((()(()()(((((((((((())((())((((((())((()((((()(()((((()(((((((())()((()))))())()((()((((()(()(((()((()())))(())())(((()(((())((((((()(((((((((()()(())))(()(((((()((((()())))((()((()((()(()()(((())((((((((((((()(((())(()(((((()))(()()(()()()()()()((())(((((((())(((((())))))())()(()()(()(()(((()()(((((())(()((()((()(((()()((()((((())()))()((((())(())))()())(((())(())(()()((()(((()()((((((((((()()(()())())(((((((((())((((()))()()((((())(()((((()(((())())(((((((((((()((((())))(())(()(((()(((()((())(((((()((()()(()(()()((((((()((((()((()(()((()(()((((((()))))()()(((((()((()(()(())()))(())(((((((()((((()())(()((()((()(()))())))(())((()))))(((((((()()()())(()))(()()((()())()((()((()()()(()(()()))(()())(())(((((()(((((((((((()((()(((()(((((((()()((((((()(((((()(()((()(((((())((((((()))((((())((()()((())(((())()(((((()()(((((()((()(()(((((((()(((((()((()((()((())(())((())(()))()()))(()()(()(()()(((((((()(((()(((())()(((((()((((((()())((((())()((()((()(()()())(()))((((()()((((((()((()(()(()((((()((()((())((((((()(()(())((((((()((((((((((()((())()))()(()(()(((((()()()))((())))()(()((((((((((((((()(((()((((()((())((()((()(((()()(()(((()((())(()()())))()(()(()(((((()()(()(()((((()(((((())()(()(()))(((((()()(((()()(())((((((((((((((())((())(((((((((((())()()()(())()(()(()(((((((((())(((()))(()()())(()((((()(())(((((()())(())((((((((())()((((()((((((())(()((()(())(((()((((()))(((((((((()()))((((()(())()()()(())(()((())((()()))()(((())(((((())((((((()()))(((((((((()((((((())))(((((((()((()(()(())))())(()(()))()(((((()())(()))()(()(())(((()))))())()())))(((((()))())()((()(()))))((()()()((((((()))()()((((((((())((()(()(((()(()((())((()())(()((((())(()(((()()()(()(()()))())())((((((((((())())((()))()((())(())(())))())()(()()(())))())(()))(((()(()()(((()(((())))()(((()(())()((((((())()))()))()((((((()(()(((((()())))()))))())()()(((()(((((())((()()(()((()((()(()(()(())))(()()()()((()(())(((()((()))((((()))())(())))())(()))()()()())()))(((()()())()((())))(())(()()()()(()())((()(()()((((())))((()((()(())((()(()((())()(()()(((()())()()())((()))((())(((()()(())))()()))(((()((())()(((((()())(())((())()())())((((((()(()(((((()))(()("""
    print(instructions.count('(') - instructions.count(')'))

def DayOnePuzzleTwo():
    instructions = """()(((()))(()()()((((()(((())(()(()((((((()(()(((())))((()(((()))((())(()((()()()()(((())(((((((())))()()(()(()(())(((((()()()((())(((((()()))))()(())(((())(())((((((())())))(()())))()))))()())()())((()()((()()()()(()((((((((()()())((()()(((((()(((())((())(()))()((((()((((((((())()((()())(())((()))())((((()())(((((((((((()()(((((()(()))())(((()(()))())((()(()())())())(()(((())(())())()()(()(()((()))((()))))((((()(((()))))((((()(()(()())())()(((()((((())((((()(((()()(())()()()())((()((((((()((()()))()((()))()(()()((())))(((()(((()))((()((()(()))(((()()(()(()()()))))()()(((()(((())())))))((()(((())()(()(())((()())))((((())))(()(()(()())()((()())))(((()((()(())()()((()((())(()()((())(())()))()))((()(())()))())(((((((()(()()(()(())())))))))(()((((((())((((())((())())(()()))))()(())(()())()())((())(()))))(()))(()((()))()(()((((((()()()()((((((((()(()(())((()()(()()))(())()())()((())))()))()())(((()))(())()(())()))()((()((()(()()())(())()()()((())())))((()()(()()((()(())()()())(((()(()()))))(())))(()(()())()))()()))))))()))))((((((())))())))(()(())())(()())))))(()))()))))))()((()))))()))))(()(()((()())())(()()))))(((())()))())())())(((()(()()))(())()(())(())((((((()()))))((()(()))))))(()))())(((()()(()))()())()()()())))))))))))))(())(()))(()))((()(())(()())(())())(()())(())()()(()())))()()()))(())())()))())())(())((())))))))(())))(())))))()))))((())(()(((()))))(()))()((()(())))(()())(((((()))()())()()))))()))))()))())(()(()()()))()))))))((()))))))))))()((()))((()(())((())()()(()()))()(()))))()()(()))()))(((())))(())()((())(())(()())()())())))))))())))()((())))()))(()))()()))(((((((()))())(()()))(()()(()))()(()((()())()))))))(((()()()())))(())()))()())(()()))()()))))))))(())))()))()()))))))()))()())))()(())(())))))()(())()()(()()))))())((()))))()))))(()(((((()))))))))())))())()(())()()))))(())))())()()())()()())()(()))))()))()))))))))())))((()))()))()))())))()())()()())))())))(()((())()((()))())))))())()(())((())))))))))))())()())(())())())(()))(()))()))())(()(())())()())()()(()))))(()(())))))))(())))())(())))))))())()()(())())())))(())))))()))()(()())()(()))())())))))()()(()))()))))())))))))))()))))()))))))())()())()()))))()())))())))))))))))()()))))()()(((()))()()(())()))))((()))))(()))(())())))(())()))))))(()))()))))(())())))))()))(()())))))))))))))())))))))))()((()())(()())))))))((()))))(())(())))()(()())())))())())(()()()())))()))))))())))))())()()())))))))))))()()(()))))()())()))((()())(()))))()(()))))))))))()())())(((())(()))))())()))()))()))))))()))))))(()))))()))))()(())))(())))(()))())()()(()()))()))(()()))))))))()))(()))())(()()(()(()())()()))()))))))))(())))))((()()(()))())())))))()))())(()())()()))())))()(()()()()))((())())))())()(()()))()))))))))(()))(())))()))))(()(()())(()))))()())())()))()()))())))))))))))())()))))))()))))))))())))))()))))())(()())))(())()))())())))))()()(()()())(()())))()()))(((()))(()()()))))()))))()))))((())))()((((((()()))))))())))))))))))(((()))))))))))))(())())))))())(()))))))(()))((()))())))()(()((()))()))()))))))))))())()))()(()()))))())))())(())()(()))()))())(()))()))))(()()))()()(())))))()))(())(()(()()))(()()())))))(((()))))))()))))))))))))(())(()))))()())())()()((()()))())))))(()))))())))))))()()()))))))))())))()(((()()))(())))))(((())())))))((()))()(()))(()))))(()())))(()))())))))()))))(())(())))()((()))(())())))()()))()))))))))()))(()()()(()()()(()))())(())()())(((()))(())))))))))(((()())))()()))))))))()(())(()))()((((())(())(()())))()))(((())()()()))((()))(()))())())))())))(()))())()())())(()(())())()()()(())))())(())))(())))(())()))()))(()((()))))))))())(()))))))())(()()))()()))()(()(()())))()()(()((()((((((()))(())))()()()))())()))((()()(()))())((()(()(()))(()()))))()())))()))()())))))))()()((()())(())))()))(()))(())(()))())(()(())))()()))))))(((()(((()()))()(()(())())((()()))()))()))()))()(()()()(()))((()())()(())))()()))(((())()()())(())()((()()()()(()(())(()()))()(((((()())))((())))))(()()()))))(((()(())))()))((()((()(())()(()((())))((()())()(()))(((()())()()(()))(())(((()((()())()((())()())(((()()))((()((())(()))(()())(()()()))((()))(())(()((()()())((()))(())))(())(())(())))(()())))(((((()(()(((((()())((((()(()())(())(()()(((())((()(((()()(((()()((((((())))())(()((((((()(()))()))()()((()((()))))()(()()(()((()()))))))(((((()(((((())()()()(())())))))))()))((()()(())))(())(()()()())))))(()((((())))))))()()(((()(()(()(()(()())()()()(((((((((()()())()(()))((()()()()()(((((((()())()((())()))((((((()(()(()(()())(((()(((((((()(((())(((((((((())(())())()))((()(()))(((()()())(())(()(()()(((()(())()))())))(())((((((())(()()())()()(((()(((())(()(((())(((((((()(((((((((()))(())(()(()(()))))((()))()(())())())((()(()((()()))((()()((()(())(())(()((())(((())(((()()()((((((()()(())((((())()))))(())((()(()((())))(((((()(()()())())((())())))((())((()((()()((((((())(((()()(()())())(()(()))(()(()))())())()(((((((()(((()(())()()((())((()(()()((()(()()(((((((((((())((())((((((())((()((((()(()((((()(((((((())()((()))))())()((()((((()(()(((()((()())))(())())(((()(((())((((((()(((((((((()()(())))(()(((((()((((()())))((()((()((()(()()(((())((((((((((((()(((())(()(((((()))(()()(()()()()()()((())(((((((())(((((())))))())()(()()(()(()(((()()(((((())(()((()((()(((()()((()((((())()))()((((())(())))()())(((())(())(()()((()(((()()((((((((((()()(()())())(((((((((())((((()))()()((((())(()((((()(((())())(((((((((((()((((())))(())(()(((()(((()((())(((((()((()()(()(()()((((((()((((()((()(()((()(()((((((()))))()()(((((()((()(()(())()))(())(((((((()((((()())(()((()((()(()))())))(())((()))))(((((((()()()())(()))(()()((()())()((()((()()()(()(()()))(()())(())(((((()(((((((((((()((()(((()(((((((()()((((((()(((((()(()((()(((((())((((((()))((((())((()()((())(((())()(((((()()(((((()((()(()(((((((()(((((()((()((()((())(())((())(()))()()))(()()(()(()()(((((((()(((()(((())()(((((()((((((()())((((())()((()((()(()()())(()))((((()()((((((()((()(()(()((((()((()((())((((((()(()(())((((((()((((((((((()((())()))()(()(()(((((()()()))((())))()(()((((((((((((((()(((()((((()((())((()((()(((()()(()(((()((())(()()())))()(()(()(((((()()(()(()((((()(((((())()(()(()))(((((()()(((()()(())((((((((((((((())((())(((((((((((())()()()(())()(()(()(((((((((())(((()))(()()())(()((((()(())(((((()())(())((((((((())()((((()((((((())(()((()(())(((()((((()))(((((((((()()))((((()(())()()()(())(()((())((()()))()(((())(((((())((((((()()))(((((((((()((((((())))(((((((()((()(()(())))())(()(()))()(((((()())(()))()(()(())(((()))))())()())))(((((()))())()((()(()))))((()()()((((((()))()()((((((((())((()(()(((()(()((())((()())(()((((())(()(((()()()(()(()()))())())((((((((((())())((()))()((())(())(())))())()(()()(())))())(()))(((()(()()(((()(((())))()(((()(())()((((((())()))()))()((((((()(()(((((()())))()))))())()()(((()(((((())((()()(()((()((()(()(()(())))(()()()()((()(())(((()((()))((((()))())(())))())(()))()()()())()))(((()()())()((())))(())(()()()()(()())((()(()()((((())))((()((()(())((()(()((())()(()()(((()())()()())((()))((())(((()()(())))()()))(((()((())()(((((()())(())((())()())())((((((()(()(((((()))(()("""
    floor = 0
    count = 0
    for i in instructions:
        if i == '(':
            floor += 1
        elif i == ')':
            floor -= 1 
        count += 1
        if floor == -1:
            print(count)  

def DayTwoPuzzleOne():

    def calculateArea(line):
        lengths = line.split('x')
        for i in range(len(lengths)):
            lengths[i] = int(lengths[i])
        end = lengths[0]*lengths[1]
        top = lengths[0]*lengths[2]
        side = lengths[1]*lengths[2]
        slack = min(end, top, side)
        return 2*sum([end, top, side]) + slack
    
    with open('/Users/Zak/Documents/Programs/Website Challenges/Day 2 Puzzle 1 input.txt', 'r') as f:
        total = 0
        for line in f.readlines():
            total += calculateArea(line)
        print(total)

def DayTwoPuzzleTwo():

    def getRibbonLength(line):
        lengths = line.split('x')
        for i in range(len(lengths)):
            lengths[i] = int(lengths[i])
        
        lengths = sorted(lengths)
        return (2*lengths[0] + 2*lengths[1]) + (lengths[0]*lengths[1]*lengths[2])

    with open('/Users/Zak/Documents/Programs/Website Challenges/Day 2 Puzzle 1 input.txt', 'r') as f:
        total = 0
        for line in f.readlines():
            total += getRibbonLength(line)
        print(total)

def DayThree1():

    def maxDisplacement(instructions, direction, opposite):
        displacement, maxDirection, maxOpposite = 0, 0, 0
        for i in instructions:
            if i == direction:
                displacement += 1
            elif i == opposite:
                displacement -= 1
            if displacement > maxDirection:
                maxDirection = displacement
            if displacement < maxOpposite:
                maxOpposite = displacement
        return maxDirection, abs(maxOpposite)        

    with open('/Users/Zak/Documents/Programs/Website Challenges/Day 3 Puzzle 1 input.txt', 'r') as f:
        instructions = []
        for line in f.readlines():
            for i in line:
                if i in '^<>v':
                    instructions.append(i)

    maxNorth, maxSouth = maxDisplacement(instructions, '^', 'v')
    maxWest, maxEast = maxDisplacement(instructions, '<', '>')
    print((maxNorth, maxEast, maxSouth, maxWest))

    grid = list([0 for house in range(maxWest + maxEast + 1)] for row in range((maxNorth + maxSouth + 1)))
    print(len(grid))
    print(len(grid[0]))

    x = maxWest - 1
    y = maxNorth - 1

    go = {'x':{'>':1, '<':-1}, 'y':{'^':1, 'v':-1}}

    for item in instructions:
        grid[y][x] += 1
        if item in '<>':
            x += go['x'][item]
        else:
            y += go['y'][item]
    grid[y][x] += 1

    housesHit = 0

    for row in grid:
        for house in row:
            if house != 0:
                housesHit += 1

    print(housesHit)
        

def DayThree2():

    def maxDisplacement(instructions, direction, opposite):
        displacement, maxDirection, maxOpposite = 0, 0, 0
        for i in instructions:
            if i == direction:
                displacement += 1
            elif i == opposite:
                displacement -= 1
            if displacement > maxDirection:
                maxDirection = displacement
            if displacement < maxOpposite:
                maxOpposite = displacement
        return maxDirection, abs(maxOpposite)

    def santaJourney(instructions, grid):
        x = maxWest - 1
        y = maxNorth - 1

        go = {'x':{'>':1, '<':-1}, 'y':{'^':1, 'v':-1}}

        for item in instructions:
            grid[y][x] += 1
            if item in '<>':
                x += go['x'][item]
            else:
                y += go['y'][item]
        grid[y][x] += 1

        return grid
        

    with open('/Users/Zak/Documents/Programs/Website Challenges/Day 3 Puzzle 1 input.txt', 'r') as f:
        instructions = []
        roboInstructions = []
        count = 0
        for line in f.readlines():
            for i in line:
                count += 1
                if i in '^<>v':
                    if count % 2 == 1:
                        instructions.append(i)
                    else:
                        roboInstructions.append(i)

    n1, s1 = maxDisplacement(instructions, '^', 'v')
    w1, e1 = maxDisplacement(instructions, '<', '>')
    n2, s2 = maxDisplacement(roboInstructions, '^', 'v')
    w2, e2 = maxDisplacement(roboInstructions, '<', '>')

    maxNorth, maxEast, maxSouth, maxWest = max(n1,n2), max(e1,e2), max(s1,s2), max(w1,w2)

    grid = list([0 for house in range(maxWest + maxEast + 1)] for row in range((maxNorth + maxSouth + 1)))
                        
    grid = santaJourney(instructions, grid)
    grid = santaJourney(roboInstructions, grid)

    housesHit = 0

    for row in grid:
        for house in row:
            if house != 0:
                housesHit += 1

    print(housesHit)
    

def DayFour():

    from hashlib import md5

    key = b'bgvyzdsv'
    digits = 0

    while True:
        digits += 1
        if md5(b'%s%s' % (key, bytes(str(digits), 'utf-8'))).hexdigest()[:6] == '000000': # remove one zero in this string and change index to [:5] for puzzle one
            print(digits)
            break
        
def DayFive1():

    nice = 0

    with open('/Users/Zak/Documents/Programs/Website Challenges/Day 5 Input.txt', 'r') as f:
        for line in f.readlines():
            if len([x for x in line if x in 'aeiou']) > 2 and len([line[x-1:x+1] for x in range(1, len(line)) if line[x] == line[x-1]]) > 0 and len([line[x-1:x+1] for x in range(1, len(line)) if line[x-1:x+1] in ['ab', 'cd', 'pq', 'xy']]) == 0:
                nice += 1
                
        print(nice)

def DayFive2():

    nice = 0

    with open('/Users/Zak/Documents/Programs/Website Challenges/Day 5 Input.txt', 'r') as f:
        for line in f.readlines():
            if len([line[x-2:x] for x in range(2, len(line)) if line[x-2:x] in line[x:]]) > 0 and len([line[x:x+3] for x in range(len(line) - 2) if line[x] == line[x+2]]) > 0:
                nice += 1
                
        print(nice)
        
def DaySix1():

    def lights(grid, instruction, l, r, u, d):
        for y in range(u, d + 1):
            for x in range(l, r + 1):
                if instruction == 'on':
                    grid[y][x] = 'X'
                elif instruction == 'off':
                    grid[y][x] = ' '
                elif instruction == 'oggle':
                    if grid[y][x] == 'X':
                        grid[y][x] = ' '
                    elif grid[y][x] == ' ':
                        grid[y][x] = 'X'

    grid = [[' ' for x in range(1000)] for y in range(1000)]
    total = 0

    file = '/Users/Zak/Documents/Programs/Website Challenges/Day 6 Input.txt'
    with open(file, 'r') as f:
        for line in f.readlines():
            line = line.strip('turn \n').split()

            topLeft, bottomRight = line[1].split(','), line[3].split(',')

            l, r, u, d = int(topLeft[0]), int(bottomRight[0]), int(topLeft[1]), int(bottomRight[1])

            lights(grid, line[0], l, r, u, d)

        for row in grid:
            total += row.count('X')

        print(total)

def DaySix2():

    def lights(grid, instruction, l, r, u, d):
        for y in range(u, d + 1):
            for x in range(l, r + 1):
                if instruction == 'on':
                    grid[y][x] += 1
                elif instruction == 'off' and grid[y][x] != 0:
                    grid[y][x] -= 1
                elif instruction == 'oggle':
                    grid[y][x] += 2

    grid = [[0 for x in range(1000)] for y in range(1000)]
    total = 0

    file = '/Users/Zak/Documents/Programs/Website Challenges/Day 6 Input.txt'
    with open(file, 'r') as f:
        for line in f.readlines():
            line = line.strip('turn \n').split()

            topLeft, bottomRight = line[1].split(','), line[3].split(',')

            l, r, u, d = int(topLeft[0]), int(bottomRight[0]), int(topLeft[1]), int(bottomRight[1])

            lights(grid, line[0], l, r, u, d)

        for row in grid:
            total += sum(row)

        print(total) 
            

            
            
        


DaySix2()




